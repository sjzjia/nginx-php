# Nginx 运行的用户和工作进程
user  nginx;
worker_processes auto;           # 自动使用 CPU 核数
worker_cpu_affinity auto;        # 绑定 CPU 核，减少上下文切换

# 错误日志路径
error_log  /var/log/nginx/error.log warn;
# Nginx PID 文件路径
pid        /var/run/nginx.pid;

# 事件模块配置
events {
    use epoll;                   # Linux 下推荐 epoll
    worker_connections 65535;    # 每个 worker 的最大连接数
    multi_accept on;             # 一次尽量多接收新连接
}

# HTTP 块：Nginx 主要的配置区域
http {
    # 包含 MIME 类型配置文件
    include       /etc/nginx/mime.types;
    # 默认 MIME 类型
    default_type  application/octet-stream;

    # 日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 访问日志路径和格式
    access_log  /var/log/nginx/access.log  main;

    # 发送文件优化
    sendfile        on;
    # tcp_nopush     on;

    # keep-alive 超时时间
    keepalive_timeout  65;

    tcp_nopush on;                   # 减少 TCP 分片
    tcp_nodelay on;                  # 提高小数据包实时性

    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript application/xml+rss;


    # 服务器块：定义虚拟主机
    server {
        listen       80; # 监听 80 端口
        server_name  localhost; # 服务器名称

        # 根目录和索引文件
        root   /var/www/html; # Web 文件的根目录
        index  index.php index.html index.htm; # 默认的索引文件

        # 访问日志
        access_log /var/log/nginx/access.log;
        # 错误日志
        error_log /var/log/nginx/error.log warn;

        # 尝试按照顺序查找文件
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        # 错误页面配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            access_log off;
        }


        # PHP 文件处理配置
        location ~ \.php$ {
            # 尝试查找文件，如果文件不存在则返回 404
            try_files $uri =404;
            # 将请求转发给 PHP-FPM 进程
            # php-fpm 监听在 9000 端口，这里通过 unix socket 或 TCP/IP 进行通信
            # 由于 Nginx 和 PHP-FPM 在同一个容器中，我们可以直接使用 php-fpm 服务的名称和端口
            fastcgi_pass   127.0.0.1:9000; # 替换为 PHP-FPM 的实际监听地址和端口
            # fastcgi_pass unix:/var/run/php-fpm.sock; # 如果使用 Unix socket

            # 包含 FastCGI 参数
            include        fastcgi_params;
            # 设置 SCRIPT_FILENAME 变量，这是 PHP-FPM 需要的，指向被执行的 PHP 脚本的完整路径
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            # 允许 PHP-FPM 包含自身的文件
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
        }

        # 禁止访问 .ht* 文件，例如 .htaccess
        location ~ /\.ht {
            deny  all;
        }
    }
}
